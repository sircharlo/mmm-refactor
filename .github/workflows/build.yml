name: Build/release

on:
  push:
    branches:
      - main
      - bump-request-*
  pull_request:
  workflow_dispatch:

jobs:
  version_checker:
    runs-on: ubuntu-latest

    outputs:
      VERSION_MATCH: ${{ steps.compare-versions.outputs.VERSION_MATCH }}

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read package version
        uses: ZvonimirSun/read-package-version-actions@v2
        id: package-version

      - name: Get Latest Release Version
        id: get-latest-release
        # uses: pozetroninc/github-action-get-latest-release@v0.8.0
        # with:
        #   repository: ${{ github.repository }}
        #   token: ${{ secrets.GITHUB_TOKEN }}
        #   excludes: draft
        uses: InsonusK/get-latest-release@v1.1.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          exclude_types: 'draft'

      - name: Compare versions and increment if needed
        id: compare-versions
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
          GITHUB_RELEASE_VERSION="${{ steps.get-latest-release.outputs.tag_name }}"
          # Strip leading 'v' if present
          GITHUB_RELEASE_VERSION="${GITHUB_RELEASE_VERSION#v}"
          echo "Package version: $PACKAGE_VERSION"
          echo "GitHub release version: $GITHUB_RELEASE_VERSION"
          if [ "$PACKAGE_VERSION" = "$GITHUB_RELEASE_VERSION" ]; then
            VERSION_MATCH=true
          else
            VERSION_MATCH=false
          fi
          echo "Versions are equal: $VERSION_MATCH"
          echo "VERSION_MATCH=${VERSION_MATCH}" >> $GITHUB_ENV
          echo "VERSION_MATCH=${VERSION_MATCH}" >> $GITHUB_OUTPUT
          exit 0

      - name: Create a pull request with version bump if needed
        if: ${{ steps.compare-versions.outputs.VERSION_MATCH == 'true' }}
        uses: r7kamura/bump-request@v0.4.1
        with:
          release_type: 'patch'

  release:
    needs: version_checker
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - run: pip install setuptools
      - run: yarn install && yarn global add @quasar/cli

      - name: Build and Publish Electron App
        run: yarn quasar build -m electron --publish always
        if: ${{ needs.version_checker.outputs.VERSION_MATCH == 'false' }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          PUBLISH_FOR_PULL_REQUEST: true
